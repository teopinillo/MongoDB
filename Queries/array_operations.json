Example of data set
{
 “_id” : ObjectId(“76478467867865765”),
“trends”: [{
    “month” : “January”
    “avg_high_tmp” : 42,
    “avg_low_tmp”  : 27,
    “icecream_cpi” :238.8
    ‘icecream_sales_in_millions” : 115
},{
“month” : “February”
    “avg_high_tmp” : 44,
    “avg_low_tmp”  : 28,
    “icecream_cpi” :225.5
    ‘icecream_sales_in_millions” : 118}
]}

find the maximum and minimum values for the average high temperature

first using $reduce expression

db.icecream_data.aggregate([{
    "$project": {
      "_id": 0,
      "max_high": {
        "$reduce": {     ===> The reduce expression
          "input": "$trends",  ===> reduce takes an array as a simple argument
          "initialValue": -Infinity, ===> Initialize the accumulator
          "in": {  ===> The Logic
            "$cond": [  ===> Conditional operator
                        if $$this.avg_high_tmp is > initialValue, return $$this.avg_high_tmp, else return the value back.
              { "$gt": ["$$this.avg_high_tmp", "$$value"] },
              "$$this.avg_high_tmp",
              "$$value"
            ]}}}}}])

Bote: $$ is only for variables inside the $reduce expression.
$$this, refer to the current element in the array.
$$value, refer to the accumulator value.
    
A simpler way:

db.icecream.aggregate([{
 $project: {_id:0, max_high : {$max:”$trends.avg_high_tmp}}}])

get the minimum
db.icecream.aggregate([{
 $project: {_id:0, max_low : {$min:”$trends.avg_high_tmp}}}])

calculate the average and standard deviation
// getting the average and standard deviations of the consumer price index
db.icecream_data.aggregate([{
    "$project": {
      "_id": 0,
      "average_cpi": { "$avg": "$trends.icecream_cpi" },
      "cpi_deviation": { "$stdDevPop": "$trends.icecream_cpi" }
    }}])

Sum values of an array
// using the $sum expression to get total yearly sales
db.icecream_data.aggregate([{
    "$project": {
      "_id": 0,
      "yearly_sales (millions)": { "$sum": "$trends.icecream_sales_in_millions" }
    }}])
